stages:
- stage: Build_and_Test

  jobs:
  - job: Build_and_Test
    displayName: Build and Tests

    strategy:
      matrix:
        ubuntu-18:
          imageName: ubuntu-18.04
        ubuntu-20:
          imageName: ubuntu-20.04
    
    pool:
      vmImage: $(imageName)
    
    steps:
      - script: |
          sudo apt-get -y update
          sudo apt-get -y install \
            make \
            automake \
            autotools-dev \
            libedit-dev \
            libjemalloc-dev \
            libncurses-dev \
            libpcre3-dev \
            libtool \
            pkg-config \
            python3-docutils \
            python3-sphinx \
            cpio \
            graphviz \
            autoconf-archive
        displayName: 'Install prerequisites'
    
      - script: wget https://varnish-cache.org/_downloads/varnish-6.0.6.tgz
        workingDirectory: $(Build.SourcesDirectory)
        displayName: 'Download Varnish 6.0.6'
    
      - task: ExtractFiles@1
        displayName: 'Extract Varnish 6.0.6'
        inputs:
          archiveFilePatterns: 'varnish-6.0.6.tgz'
          destinationFolder: $(Build.SourcesDirectory)
          cleanDestinationFolder: false
    
      - bash: './autogen.sh && ./configure && make && sudo make install'
        workingDirectory: $(Build.SourcesDirectory)/varnish-6.0.6
        displayName: 'Build and Install Varnish 6.0.6'
    
      - script: rm -rf varnish-6.0.6
        workingDirectory: $(Build.SourcesDirectory)
        displayName: "Remove Varnish-6.0.6 After Installation"
    
      - checkout: self
        submodules: recursive
        lfs: true
    
      - bash: 'chmod a+x autogen.sh && ./autogen.sh'
        workingDirectory: $(Build.SourcesDirectory)
        displayName: 'Run autogen.sh'
    
      - bash: './configure --with-config=test'
        workingDirectory: $(Build.SourcesDirectory)
        displayName: 'Run configure'
    
      - bash: 'make'
        workingDirectory: $(Build.SourcesDirectory)
        displayName: 'Build'
    
      - bash: |
          export PATH=/usr/local/sbin:$PATH
          export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
          make check
        workingDirectory: $(Build.SourcesDirectory)
        failOnStderr: true
        timeoutInMinutes: 30
        displayName: 'Run Tests'
    
      - script: |
          curl "https://distributor.51degrees.com/api/v2/download?LicenseKeys=$(licensekey)&Type=HashV41&Download=True&Product=V4Enterprise" --output Enterprise-HashV41.hash.gz
        displayName: 'Download Latest Data File'
    
      - task: ExtractFiles@1
        displayName: 'Extract Data File'
        inputs:
          archiveFilePatterns: 'Enterprise-HashV41.hash.gz'
          cleanDestinationFolder: false
    
      - bash: './configure --with-config=test --with-datafile=Enterprise-HashV41.hash'
        workingDirectory: $(Build.SourcesDirectory)
        displayName: 'Run configure for Enterprise'
    
      - bash: 'make'
        workingDirectory: $(Build.SourcesDirectory)
        displayName: 'Build'
    
      - bash: |
          export PATH=/usr/local/sbin:$PATH
          export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
          make check
        workingDirectory: $(Build.SourcesDirectory)
        failOnStderr: true
        timeoutInMinutes: 30
        displayName: 'Run Tests'